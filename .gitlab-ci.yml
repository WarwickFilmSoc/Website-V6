stages:
  - install
#  - lint
  - build
  - release
  - deploy

default:
  image: node:18.17.1-alpine

install-deps:
  stage: install
  script:
    - echo "Installing dependencies..."
    - npm ci --cache
    - echo "Dependencies installed."
  artifacts:
    paths:
      - node_modules

#run-linter:
#  stage: lint
#  script:
#    - echo "Linting code..."
#    - npm run lint
#    - echo "No lint issues found."

build-app:
  stage: build
  script:
    - echo "Compiling app..."
    - npm run build
    - echo "Compile complete."
  artifacts:
    paths:
      - .next

build-image:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "Building Docker image..."
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/.docker/Dockerfile"
      --destination "host.docker.internal:5000/website-v6:${CI_COMMIT_BRANCH}"
      --insecure
    - echo "Build complete."
  only:
    - main
    - production

deploy-main:
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - chmod 400 "$GITLAB_RUNNER_CI_SSH_PRIVATE_KEY"
    - ssh-add "$GITLAB_RUNNER_CI_SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - echo "Updating service ${SERVICE_NAME} on Docker swarm..."
    - ssh gitlab-runner-ci@host.docker.internal "docker service update --image=swarm:5000/${IMAGE} ${SERVICE_NAME} && exit"
    - echo "Deployment complete."
  variables:
    SERVICE_NAME: website-v6-dev
    IMAGE: website-v6:main

  only:
    - main

deploy-production:
  extends: deploy-main
  only:
    - production
  variables:
    SERVICE_NAME: website-v6-production
    IMAGE: website-v6:production
  when: manual
  needs:
    - build-image
