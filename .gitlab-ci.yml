# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - install
  - lint
  - build
  - release
  - deploy

default:
    image: node:18-alpine

install-deps:
  stage: install
  script:
    - echo "Installing dependencies..."
    - npm ci --cache .npm
    - npm i sharp
    - echo "Dependencies installed."
  artifacts:
    paths:
      - node_modules

run-linter:
  stage: lint
  script:
    - echo "Linting code..."
    - npm run lint
    - echo "No lint issues found."

build-app:
  stage: build
  script:
    - echo "Compiling app..."
    - npm run build
    - echo "Compile complete."
  artifacts:
    paths:
      - .next

build-image:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "Building Docker image..."
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/.docker/Dockerfile"
      --destination "host.docker.internal:5000/website-v6:${CI_COMMIT_BRANCH}"
      --insecure
    - echo "Build complete."
  only:
    - main
    - production

deploy-main:
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - chmod 400 "$GITLAB_RUNNER_CI_SSH_PRIVATE_KEY"
    - ssh-add "$GITLAB_RUNNER_CI_SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - echo "Updating service ${SERVICE_NAME} on Docker swarm..."
    - docker service update --image=swarm:5000/website-v6:$IMAGE $SERVICE_NAME
    - echo "Deployment complete."
  variables:
    SERVICE_NAME: website-v6-dev
    IMAGE: website-v6:main

  only:
    - main

deploy-production:
  extends: deploy-main
  only:
    - production
  variables:
    SERVICE_NAME: website-v6-production
    IMAGE: website-v6:production
  when: manual
  needs:
    - build-image
