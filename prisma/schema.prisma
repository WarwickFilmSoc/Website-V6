generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Meeting {
  id           Int         @id @default(autoincrement())
  type         MeetingType @default(EXEC_MEETING)
  meeting_date DateTime    @default(dbgenerated("'0000-00-00 00:00:00'")) @db.DateTime(0)
  text         String      @db.MediumText
  visible      Int?        @default(1)

  @@map("meetings")
}

model AspectCode {
  code        Int     @id @default(0)
  description String? @db.VarChar(50)

  @@map("aspectcodes")
}

model CertCode {
  code        Int     @id @default(0)
  name        String  @default("") @db.VarChar(4)
  description String? @db.VarChar(50)

  @@map("certcodes")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Film {
  film_id            Int           @id @default(autoincrement()) @db.UnsignedInt
  title              String        @default("") @db.VarChar(75)
  year               Int?
  runtime            Int           @default(0)
  director           String        @db.VarChar(75)
  starring           String        @db.VarChar(255)
  synopsis           String        @db.MediumText
  tagline            String?       @db.Text
  review             String        @db.MediumText
  reviewer           String        @default("Archive") @db.VarChar(50)
  aspect             Int           @default(0)
  cert               Int           @default(0)
  imdb_url           String?       @db.VarChar(50)
  imdb_id            String?       @db.VarChar(9)
  tmdb_id            Int?
  ticket_title       Bytes?        @ignore @db.MediumBlob
  ticket_title_ct    String        @db.Text
  review_image       Int?
  web_title          Int?
  subtitles          FilmSubtitles @default(UNKNOWN)
  tmdb_backdrop_path String?       @db.VarChar(64)
  tmdb_poster_path   String?       @db.VarChar(64)
  tmdb_overview      String?       @db.MediumText
  tmdb_release_date  String?       @db.VarChar(32)
  tmdb_genres        String?       @db.VarChar(256)
  youtube_trailer_id String?       @db.VarChar(16)
  tmdb_last_updated  DateTime?     @db.DateTime(0)
  tmdb_disable       Boolean       @default(false)
  screenings         Screening[]

  @@index([synopsis(length: 100), review(length: 100)], map: "synopsis")
  @@map("films")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Screening {
  scr_id          Int                     @id @default(autoincrement()) @db.UnsignedInt
  film_id         Int                     @default(0) @db.UnsignedInt
  time            DateTime                @default(dbgenerated("'20:00:00'")) @ignore @db.Time(0)
  date            DateTime                @default(dbgenerated("'0000-00-00'")) @ignore @db.Date
  timestamp       BigInt?
  location_id     Int                     @default(1)
  gauge           ScreeningGauge          @default(MM_35)
  graphics_status ScreeningGraphicsStatus @default(PENDING)
  titles_status   ScreeningTitlesStatus   @default(PENDING)
  editing_status  ScreeningEditingStatus  @default(PENDING)
  union_event_id  Int?                    @unique(map: "union_event_id") @db.UnsignedInt
  hidden          Boolean                 @default(false)
  film            Film                    @relation(fields: [film_id], references: [film_id], onUpdate: Restrict, map: "film_id")
  ticket_log      TicketLog[]

  @@unique([film_id, scr_id], map: "epos")
  @@index([film_id], map: "film_id")
  @@index([location_id], map: "location_id")
  @@index([timestamp], map: "timestamp")
  @@map("screenings")
}

model SubtitleCode {
  id          Int    @id @default(autoincrement())
  name        String @default("") @db.VarChar(50)
  description String @default("") @db.VarChar(255)

  @@map("subtitle_codes")
}

model TermDate {
  timestamp Int @id @default(0) @db.UnsignedInt
  year      Int @db.Year
  term      Int @default(0) @db.UnsignedTinyInt

  @@index([term, year], map: "term_year")
  @@map("term_dates")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model WebUser {
  hash            String       @default("") @db.VarChar(32)
  name            String?      @db.VarChar(100)
  mem_id          Int?         @default(0)
  pid             Int          @default(0) @db.UnsignedInt
  passlastreset   DateTime?    @default(now()) @ignore @db.Timestamp(6)
  login           String       @unique(map: "login") @default("") @db.VarChar(30)
  seed            String       @default("") @db.VarChar(40)
  web_id          Int          @id @default(autoincrement())
  redirect        Int          @default(1) @db.SmallInt
  phpbb_id        Int?         @db.MediumInt
  update_name     Boolean      @default(true)
  v6_web_sessions WebSession[]
  person          Person       @relation(fields: [pid], references: [id], onDelete: Cascade, map: "person")

  @@index([pid], map: "pid")
  @@map("web_users")
}

model WebSession {
  id          String   @id @db.VarChar(128)
  web_user_id Int
  created_at  DateTime @db.DateTime(0)
  expires_at  DateTime @db.DateTime(0)
  web_user    WebUser  @relation(fields: [web_user_id], references: [web_id], onDelete: Cascade, map: "web_user_id")

  @@index([expires_at], map: "expires_at_index")
  @@index([web_user_id], map: "web_user_id")
  @@map("v6_web_sessions")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Membership {
  mem_id          Int            @id @default(autoincrement()) @db.UnsignedInt
  person_id       Int            @db.UnsignedInt
  joined          DateTime       @default(dbgenerated("'0000-00-00'")) @db.Date
  expires         DateTime?      @db.Date
  autoupdate      Int            @default(1) @db.TinyInt
  membership_type MembershipType @default(MEMBER)
  added           DateTime       @default(now()) @db.DateTime(0)
  addedBy         Int            @default(0)
  updated         DateTime       @default(now()) @db.Timestamp(0)
  updatedBy       Int            @default(0)
  person          Person         @relation(fields: [person_id], references: [id], onDelete: NoAction, map: "memberships_ibfk_1")
  ticket_log      TicketLog[]

  @@index([expires], map: "expires")
  @@index([membership_type], map: "membership_type")
  @@index([person_id], map: "person_id")
  @@map("memberships")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Person {
  id          Int          @id @default(autoincrement()) @db.UnsignedInt
  uni_no      String       @unique(map: "uni_no") @default("wsc0000") @db.VarChar(7)
  forename    String       @default("") @db.VarChar(60)
  surname     String       @default("") @db.VarChar(60)
  nickname    String?      @db.VarChar(30)
  photo_id    Int?
  email       String?      @db.VarChar(255)
  canemail    Boolean      @default(false)
  canphone    Boolean      @default(false)
  canpost     Boolean      @default(false)
  no3rdparty  Boolean      @default(true)
  autoupdate  Boolean      @default(true)
  added       DateTime     @default(now()) @db.DateTime(0)
  addedBy     Int          @default(0)
  updated     DateTime     @default(now()) @db.Timestamp(0)
  updatedBy   Int          @default(0)
  memberships Membership[]
  ticket_log  TicketLog[]
  web_users   WebUser[]

  @@index([email], map: "email")
  @@index([forename], map: "forename")
  @@index([surname], map: "surname")
  @@map("people")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model TicketLog {
  id                      Int         @id @default(autoincrement())
  mem_id                  Int?        @db.UnsignedInt
  event_id                Int?        @db.UnsignedInt
  ticket_type_id          Int         @default(0) @db.UnsignedInt
  transaction_time        DateTime    @default(dbgenerated("'0000-00-00 00:00:00'")) @db.DateTime(0)
  transaction_id          Int         @default(0) @db.UnsignedInt
  multiticket_id          Int?
  user_id                 Int?        @db.UnsignedInt
  till_name               String?     @db.VarChar(150)
  till_ip                 String?     @db.VarChar(15)
  session_id              Int         @default(0) @db.UnsignedInt
  ticket_transaction_type String      @default("TICKET_SALE") @db.VarChar(30)
  person                  Person?     @relation(fields: [mem_id], references: [id], map: "ticket_log_ibfk_1")
  screening               Screening?  @relation(fields: [event_id], references: [scr_id], onDelete: NoAction, map: "ticket_log_ibfk_2")
  membership              Membership? @relation(fields: [user_id], references: [mem_id], onDelete: NoAction, map: "ticket_log_ibfk_7")

  @@index([event_id], map: "event_id")
  @@index([mem_id, ticket_type_id, event_id], map: "idx_mem_type_event")
  @@index([multiticket_id], map: "multiticket_id")
  @@index([session_id], map: "session_id")
  @@index([ticket_type_id], map: "ticket_type_id")
  @@index([transaction_id], map: "transaction_id")
  @@index([user_id], map: "user_id")
  @@map("ticket_log")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model NewsArticle {
  article_id       Int             @id @default(autoincrement())
  creator_id       Int             @default(0)
  add_timestamp    Int             @default(0)
  title            String          @default("") @db.VarChar(200)
  text             String          @db.MediumText
  author           String          @default("") @db.VarChar(200)
  old              Boolean         @default(false)
  html             Boolean         @default(false)
  visible          Boolean         @default(false)
  modify_timestamp Int             @default(0)
  priority         Int             @default(0) @db.TinyInt
  type             NewsArticleType @default(GENERAL)

  @@index([old], map: "idx_old")
  @@map("news_articles")
}

enum MeetingType {
  EXEC_MEETING          @map("Exec Meeting")
  DM_MEETING            @map("DM Meeting")
  PROJECTIONIST_MEETING @map("Projectionists Meeting")
  PUBLICITY_MEETING     @map("Publicity Meeting")
  IT_MEETING            @map("IT Meeting")
}

enum ScreeningGauge {
  MM_35        @map("35mm")
  MM_70        @map("70mm")
  MM_16        @map("16mm")
  DIGITAL      @map("digital")
  DIGITAL_35MM @map("35mm/digital")
}

enum ScreeningGraphicsStatus {
  UNKNOWN @map("unknown")
  N_A     @map("N/A")
  PENDING @map("pending")
  DONE    @map("done")
}

enum ScreeningTitlesStatus {
  UNKNOWN @map("unknown")
  N_A     @map("N/A")
  PENDING @map("pending")
  DONE    @map("done")
}

enum ScreeningEditingStatus {
  UNKNOWN @map("unknown")
  N_A     @map("N/A")
  PENDING @map("pending")
  DONE    @map("done")
}

enum FilmSubtitles {
  NONE      @map("none")
  UNKNOWN   @map("unknown")
  EXPECTED  @map("expected")
  PARTIALLY @map("partially")
}

enum MembershipType {
  MEMBER           @map("member")
  LIFE_MEMBER      @map("life member")
  LIFE_ASSOCIATE   @map("life associate")
  CREW             @map("crew")
  PROVISIONAL_CREW @map("provisional_crew")
}

enum NewsArticleType {
  GENERAL @map("general")
  CREW    @map("associate")
  ALL     @map("all")
}
